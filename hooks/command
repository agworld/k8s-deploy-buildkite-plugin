#!/bin/bash

function updateImage () {
    local i=0
    local imagevarname="BUILDKITE_PLUGIN_K8S_DEPLOY_CONTAINERS_${i}_IMAGE"
    local containervarname="BUILDKITE_PLUGIN_K8S_DEPLOY_CONTAINERS_${i}_CONTAINERNAME"
    local containerstring=""

    # Extract each container to be updated
    while [[ -n "${!imagevarname:-}" ]] ; do
        containerstring=("${containerstring} ${!containervarname}=${!imagevarname}")
        i=$((i+1))
        imagevarname="BUILDKITE_PLUGIN_K8S_DEPLOY_CONTAINERS_${i}_IMAGE"
        containervarname="BUILDKITE_PLUGIN_K8S_DEPLOY_CONTAINERS_${i}_CONTAINERNAME"
    done

    local namespace="$BUILDKITE_PLUGIN_K8S_DEPLOY_NAMESPACE"
    local deploymentName="$BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTNAME"
    local timeout="${BUILDKITE_PLUGIN_K8S_DEPLOY_TIMEOUT:-60s}"
    local annotation="Buildkite deploy $(date +'%d-%m-%Y %H:%M')."

    if [[ ! -z "${BUILDKITE_UNBLOCKER}" ]]; then
        annotation="${annotation} unblocker='${BUILDKITE_UNBLOCKER}'"
    fi

    local gitcommitstring=$(git log --oneline -n 1) || ""
    if [[ ! -z "${gitcommitstring}" ]]; then
        annotation="${annotation} commit='${gitcommitstring}'"
    fi
    
    echo "--- :kubernetes: Deploying new image to ${deploymentName}"

    kubectl set image deployment/$deploymentName $containerstring --record -n $namespace
    kubectl annotate deployment/$deploymentName kubernetes.io/change-cause="${annotation}" -n $namespace

    if kubectl rollout status deployment/$deploymentName -n $namespace --timeout=$timeout ; then
        echo "--- :bk-status-passed: Deploy success"
    else
        if [[ "$BUILDKITE_PLUGIN_K8S_DEPLOY_ROLLBACKONFAIL" == "true" ]]; then
            echo "--- :bk-status-failed: Deploy failed. Rolling back to previous revision"
            kubectl rollout undo deployment/$deploymentName -n $namespace
        else
            echo "--- :bk-status-failed: Deploy failed"
        fi
        exit 1
    fi
    
}

if [[ "$BUILDKITE_PLUGIN_K8S_DEPLOY_ACTION" == "updateImage" ]] ; then
    updateImage    
fi