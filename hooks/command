#!/bin/bash

function updateImage () {
    local i=0
    local imagevarname="BUILDKITE_PLUGIN_K8S_DEPLOY_CONTAINERS_${i}_IMAGE"
    local containervarname="BUILDKITE_PLUGIN_K8S_DEPLOY_CONTAINERS_${i}_CONTAINERNAME"
    local containerstring=""

    # Extract each container to be updated
    while [[ -n "${!imagevarname:-}" ]] ; do
        containerstring=("${containerstring} ${!containervarname}=${!imagevarname}")
        i=$((i+1))
        imagevarname="BUILDKITE_PLUGIN_K8S_DEPLOY_CONTAINERS_${i}_IMAGE"
        containervarname="BUILDKITE_PLUGIN_K8S_DEPLOY_CONTAINERS_${i}_CONTAINERNAME"
    done

    local namespace="$BUILDKITE_PLUGIN_K8S_DEPLOY_NAMESPACE"
    local deploymentName="$BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTNAME"
    local timeout="${BUILDKITE_PLUGIN_K8S_DEPLOY_TIMEOUT:-300}s"
    local annotation="Buildkite deploy $(date +'%d-%m-%Y %H:%M')."

    if [[ ! -z "${BUILDKITE_UNBLOCKER}" ]]; then
        annotation="${annotation} unblocker='${BUILDKITE_UNBLOCKER}'"
    fi

    local gitcommitstring=$(git log --oneline -n 1) || "$BUILDKITE_COMMIT $BUILDKITE_MESSAGE"
    if [[ ! -z "${BUILDKITE_MESSAGE}" ]]; then
        annotation="${annotation} commit='${gitcommitstring}'"
    fi

    echo "--- :kubernetes: Deploying new image to ${deploymentName}"

    if [[ ! -z "${BUILDKITE_PLUGIN_K8S_DEPLOY_PATCHJSON}" ]]; then
        echo "${BUILDKITE_PLUGIN_K8S_DEPLOY_PATCHJSON}" > "/tmp/${BUILDKITE_COMMIT}.json"
        kubectl patch deployment/${deploymentName} --namespace="${namespace}" --type="json" -p="$(cat /tmp/${BUILDKITE_COMMIT}.json)"
    fi

    kubectl set image deployment/$deploymentName $containerstring --record -n $namespace

    kubectl annotate deployment/$deploymentName kubernetes.io/change-cause="${annotation}" -n $namespace

    if kubectl rollout status deployment/$deploymentName -n $namespace --timeout=$timeout ; then
        echo "--- :bk-status-passed: Deploy success"
    else
        if [[ "$BUILDKITE_PLUGIN_K8S_DEPLOY_ROLLBACKONFAIL" == "true" ]]; then
            echo "--- :bk-status-failed: Deploy failed. Rolling back to previous revision"
            kubectl rollout undo deployment/$deploymentName -n $namespace
        else
            echo "--- :bk-status-failed: Deploy failed"
        fi
        exit 1
    fi
}

function promoteImage () {
    aws ecr get-login-password --region $BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_REGION | docker login --username AWS --password-stdin $BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_REPOSITORYURL
    if [ $? -ne 0 ]; then
        echo "--- :bk-status-failed: Promotion failed. Authentication failed with source repository"
        exit 1
    fi


    docker pull $BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_REPOSITORYURL/$BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_IMAGE
    if [ $? -ne 0 ]; then
        echo "--- :bk-status-failed: Promotion failed. Failed to pull source image"
        exit 1
    fi

    local i=0
    local destinationimage="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_IMAGE"
    local destinationrepositoryurl="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REPOSITORYURL"
    local destinationregion="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REGION"

    local push_pids=()

    while [[ -n "${!destinationimage:-}" ]] ; do
        # Authenticate with the destination region
        aws ecr get-login-password --region ${!destinationregion} | docker login --username AWS --password-stdin ${!destinationrepositoryurl}
        if [ $? -ne 0 ]; then
            echo "--- :bk-status-failed: Promotion failed. Authentication failed with destination repository ${!destinationrepositoryurl}"
            exit 1
        fi
        
        # Tag and push the image
        docker tag $BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_REPOSITORYURL/$BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_IMAGE ${!destinationrepositoryurl}/${!destinationimage}

        # Start push in parallel
        docker push ${!destinationrepositoryurl}/${!destinationimage} &
        push_pids+=($!)

        i=$((i+1))
        destinationimage="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_IMAGE"
        destinationrepositoryurl="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REPOSITORYURL"
        destinationregion="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REGION"
    done

    for i in ${!push_pids[@]}; do
        # Wait for push to complete
        wait ${push_pids[$i]}

        local push_exit_code=$?

        # Cleanup the tag locally
        destinationimage="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_IMAGE"
        destinationrepositoryurl="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REPOSITORYURL"

        docker rmi ${!destinationrepositoryurl}/${!destinationimage}

        if [ push_exit_code -ne 0 ]; then
            echo "--- :bk-status-failed: Promotion failed. Push failed to destination repository ${!destinationrepositoryurl}"
            exit 1
        fi
    done

    # Clean up the pulled image
    docker image rm $BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_REPOSITORYURL/$BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_IMAGE
}

case "$BUILDKITE_PLUGIN_K8S_DEPLOY_ACTION" in
    'updateImage')
        updateImage
        ;;
    'promoteImage')
        promoteImage
        ;;
    *)
        echo "Invalid action: $BUILDKITE_PLUGIN_K8S_DEPLOY_ACTION"
        ;;
esac
